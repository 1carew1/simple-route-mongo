{
  "stats": {
    "suites": 2,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2017-05-09T22:26:02.959Z",
    "end": "2017-05-09T22:26:03.935Z",
    "duration": 976,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Directions API + Schema unit tests",
        "suites": [],
        "tests": [
          {
            "title": "Cannot do anything via Rest without Basic Auth",
            "fullTitle": "Directions API + Schema unit tests Cannot do anything via Rest without Basic Auth",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").expect(\"Content-type\", /json/).expect(401).end(function (err, res) {\n    res.status.should.equal(401);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1dea59bd-ff4a-4ba5-a4f8-126a84b79d76",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return collection of JSON documents",
            "fullTitle": "Directions API + Schema unit tests should return collection of JSON documents",
            "timedOut": false,
            "duration": 534,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n    res.status.should.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "935cafe1-3f59-4819-a54f-de9e7c4c444a",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should add a direction",
            "fullTitle": "Directions API + Schema unit tests should add a direction",
            "timedOut": false,
            "duration": 47,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"start_address\": \"49 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property('_id');\n    res.body.direction.should.have.property('date_searched');\n    res.body.direction.end_address.should.equal('12 Real Street');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "11933c23-68c0-4bc1-8ec7-a445ecb53167",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should update direction",
            "fullTitle": "Directions API + Schema unit tests should update direction",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.put(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').send({ \"end_address\": \"12 Real Street\", \"start_address\": \"492 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).end(function (err, res) {\n        res.body._id.should.equal(id);\n        res.body.start_address.should.equal('492 Fake Street');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "df1a3158-4c89-4b3a-95a6-ce367a784317",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get specific direction",
            "fullTitle": "Directions API + Schema unit tests should get specific direction",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.get(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n    .end(function (err, res) {\n        res.body._id.should.equal(id);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b647c61c-e0b8-4553-9e63-db524329f6cf",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should delete direction",
            "fullTitle": "Directions API + Schema unit tests should delete direction",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var superserver = (0, _supertest2.default)(_app.server);\n        superserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n        .end(function (err, res) {\n            var id = res.body[0]._id;\n            superserver.delete(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n            .end(function (err, res) {\n                res.body._id.should.equal(id);\n                res.body.should.have.property(\"date_searched\");\n                done();\n            });\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "3e383177-36f7-41e4-a585-a910e2d516b8",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cannot add direction with blank start address",
            "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank start address",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7a80c533-5a25-4c87-8770-bf16e4beabef",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cannot add direction with blank end address",
            "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank end address",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5163544a-01fa-4dda-9f98-847ce3c7184d",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cannot add direction with blank user",
            "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank user",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"end_address\": \"12 Real Street\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3c370a3e-8982-48d4-a8be-fb98885efb87",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Start Address should be greater than 5 characters",
            "fullTitle": "Directions API + Schema unit tests Start Address should be greater than 5 characters",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12\", \"end_address\": \"12 Real Street\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e03f409b-8bf5-435a-85b7-8e21c188e0dd",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "End Address should be greater than 5 characters",
            "fullTitle": "Directions API + Schema unit tests End Address should be greater than 5 characters",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"12\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "23585cc0-9252-4cc8-9c64-2feb9bad4cb5",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User Id should be greater than 5 characters",
            "fullTitle": "Directions API + Schema unit tests User Id should be greater than 5 characters",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0ae32f40-e909-4932-941e-008d0daf9863",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Date search should Default to a date",
            "fullTitle": "Directions API + Schema unit tests Date search should Default to a date",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\", \"date_searched\": \"1234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    var regex = new RegExp(\"^\\\\d{4}\\\\-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d+Z$\");\n    (0, _should2.default)(regex.test(res.body.direction)).be.ok;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1b7b34d0-e554-4f11-858a-23545d3726d4",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Query Paramter - Limit - Should return one direction",
            "fullTitle": "Directions API + Schema unit tests Query Paramter - Limit - Should return one direction",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        var limit = 1;\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?limit=\" + limit).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(limit);\n            done();\n        });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8cf515ca-4c7d-4bdc-a335-a1c27c8546bb",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Query Paramter - User Id - Should return directions for that user",
            "fullTitle": "Directions API + Schema unit tests Query Paramter - User Id - Should return directions for that user",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var userId = \"Test14USerId\";\n(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?user_id=\" + userId).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(2);\n            done();\n        });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9488beb7-a924-40be-9551-7839ba7630e1",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 120000,
        "file": "/test/testDirections.js",
        "uuid": "47122c45-775d-4018-b786-c03ff84c6d05",
        "failedHooks": [],
        "fullFile": "/Users/colmcarew/Documents/Masters/Enterprise Web Dev/Assignment2/simple-route-mongo/test/testDirections.js",
        "passes": [
          {
            "title": "Cannot do anything via Rest without Basic Auth",
            "fullTitle": "Directions API + Schema unit tests Cannot do anything via Rest without Basic Auth",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").expect(\"Content-type\", /json/).expect(401).end(function (err, res) {\n    res.status.should.equal(401);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1dea59bd-ff4a-4ba5-a4f8-126a84b79d76",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return collection of JSON documents",
            "fullTitle": "Directions API + Schema unit tests should return collection of JSON documents",
            "timedOut": false,
            "duration": 534,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n    res.status.should.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "935cafe1-3f59-4819-a54f-de9e7c4c444a",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should add a direction",
            "fullTitle": "Directions API + Schema unit tests should add a direction",
            "timedOut": false,
            "duration": 47,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"start_address\": \"49 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property('_id');\n    res.body.direction.should.have.property('date_searched');\n    res.body.direction.end_address.should.equal('12 Real Street');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "11933c23-68c0-4bc1-8ec7-a445ecb53167",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should update direction",
            "fullTitle": "Directions API + Schema unit tests should update direction",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.put(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').send({ \"end_address\": \"12 Real Street\", \"start_address\": \"492 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).end(function (err, res) {\n        res.body._id.should.equal(id);\n        res.body.start_address.should.equal('492 Fake Street');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "df1a3158-4c89-4b3a-95a6-ce367a784317",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get specific direction",
            "fullTitle": "Directions API + Schema unit tests should get specific direction",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.get(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n    .end(function (err, res) {\n        res.body._id.should.equal(id);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b647c61c-e0b8-4553-9e63-db524329f6cf",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should delete direction",
            "fullTitle": "Directions API + Schema unit tests should delete direction",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var superserver = (0, _supertest2.default)(_app.server);\n        superserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n        .end(function (err, res) {\n            var id = res.body[0]._id;\n            superserver.delete(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n            .end(function (err, res) {\n                res.body._id.should.equal(id);\n                res.body.should.have.property(\"date_searched\");\n                done();\n            });\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "3e383177-36f7-41e4-a585-a910e2d516b8",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cannot add direction with blank start address",
            "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank start address",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7a80c533-5a25-4c87-8770-bf16e4beabef",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cannot add direction with blank end address",
            "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank end address",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5163544a-01fa-4dda-9f98-847ce3c7184d",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cannot add direction with blank user",
            "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank user",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"end_address\": \"12 Real Street\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3c370a3e-8982-48d4-a8be-fb98885efb87",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Start Address should be greater than 5 characters",
            "fullTitle": "Directions API + Schema unit tests Start Address should be greater than 5 characters",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12\", \"end_address\": \"12 Real Street\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e03f409b-8bf5-435a-85b7-8e21c188e0dd",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "End Address should be greater than 5 characters",
            "fullTitle": "Directions API + Schema unit tests End Address should be greater than 5 characters",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"12\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "23585cc0-9252-4cc8-9c64-2feb9bad4cb5",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User Id should be greater than 5 characters",
            "fullTitle": "Directions API + Schema unit tests User Id should be greater than 5 characters",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0ae32f40-e909-4932-941e-008d0daf9863",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Date search should Default to a date",
            "fullTitle": "Directions API + Schema unit tests Date search should Default to a date",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\", \"date_searched\": \"1234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    var regex = new RegExp(\"^\\\\d{4}\\\\-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d+Z$\");\n    (0, _should2.default)(regex.test(res.body.direction)).be.ok;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1b7b34d0-e554-4f11-858a-23545d3726d4",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Query Paramter - Limit - Should return one direction",
            "fullTitle": "Directions API + Schema unit tests Query Paramter - Limit - Should return one direction",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        var limit = 1;\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?limit=\" + limit).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(limit);\n            done();\n        });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8cf515ca-4c7d-4bdc-a335-a1c27c8546bb",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Query Paramter - User Id - Should return directions for that user",
            "fullTitle": "Directions API + Schema unit tests Query Paramter - User Id - Should return directions for that user",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var userId = \"Test14USerId\";\n(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?user_id=\" + userId).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(2);\n            done();\n        });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9488beb7-a924-40be-9551-7839ba7630e1",
            "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 15,
        "totalPasses": 15,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 702,
        "rootEmpty": false
      },
      {
        "title": "User Preferences API + Schema unit tests",
        "suites": [],
        "tests": [
          {
            "title": "should return collection of JSON documents",
            "fullTitle": "User Preferences API + Schema unit tests should return collection of JSON documents",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // This is the HTTP response\n.end(function (err, res) {\n    // HTTP status should be 200\n    res.status.should.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6f6e77c6-aee3-405b-acaf-d0d0882ae30a",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should add a User Preference",
            "fullTitle": "User Preferences API + Schema unit tests should add a User Preference",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username\", user_id: \"12345\", email: \"cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('cc@cc.cc');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d1c032d9-6c0c-4981-aeac-3e3950a6b8ab",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "user email can be blank",
            "fullTitle": "User Preferences API + Schema unit tests user email can be blank",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"usfffername\", user_id: \"123fff45\", email: \"\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "32ebc3fd-15d3-4570-abf4-bb31d2912659",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "username should does not need to be unique",
            "fullTitle": "User Preferences API + Schema unit tests username should does not need to be unique",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"1234567890\", email: \"colmtest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"123xxrere45\", email: \"cc2cvvc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        res.body.userPreference.username.should.equal(\"testusername\");\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d4219ef2-585c-421a-98d9-524c679d971a",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "user_id should be unique",
            "fullTitle": "User Preferences API + Schema unit tests user_id should be unique",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"RandonUserName\", user_id: \"test123\", email: \"antoherTest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"test123\", email: \"cc2cv323vc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bc4943b6-1316-4651-8bed-2dc163cf59dd",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "add a location to user preference",
            "fullTitle": "User Preferences API + Schema unit tests add a location to user preference",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2\", user_id: \"123452\", email: \"2cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    userPreference.email.should.equal('2cc@cc.cc');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5c1282f0-4137-4c1f-ade3-86cdf13d5984",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A location should have a correctly formatted latitude",
            "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted latitude",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2343\", user_id: \"123432432452\", email: \"3243242cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 'abvdfre', lng: -7.234534 }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ebf93151-c6d3-4cfd-9f59-0b99b9e901e2",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A location should have a correctly formatted longitude",
            "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted longitude",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"use34rname2343\", user_id: \"1232432452\", email: \"32442cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 52.34534, lng: 'abvdfre' }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cd928064-a958-45d2-a7d0-4e53386199bb",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "An email should be formatted correctly",
            "fullTitle": "User Preferences API + Schema unit tests An email should be formatted correctly",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserName\", user_id: \"ANewUserId\", email: \"aBadEmail\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n            res.status.should.equal(500);\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "b67e6efa-d27c-4894-a2c8-c36140acf7d2",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User preference needs a username",
            "fullTitle": "User Preferences API + Schema unit tests User preference needs a username",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ user_id: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "728b5f51-fa4b-4bed-8196-17d1b27f14c0",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User preference needs a user id",
            "fullTitle": "User Preferences API + Schema unit tests User preference needs a user id",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "586ec210-6e57-4ada-a149-a854493a71fb",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Travel Mode Must be in Given List",
            "fullTitle": "User Preferences API + Schema unit tests Travel Mode Must be in Given List",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", travel_mode: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a2b57c41-8db7-4b1b-931f-be3acab1efda",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Unit System Must be within a given list",
            "fullTitle": "User Preferences API + Schema unit tests Unit System Must be within a given list",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", unit_system: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2ea7eb54-692d-4aeb-b99c-d1767fae4e2b",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Obtain User Preference By User Id - Not DB _id",
            "fullTitle": "User Preferences API + Schema unit tests Obtain User Preference By User Id - Not DB _id",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest14\", user_id: \"newUserForTest14\", email: \"newUserForTest14@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "938fe3a3-d671-4613-907d-7cacecff49d7",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Updating a User Preference",
            "fullTitle": "User Preferences API + Schema unit tests Updating a User Preference",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest15\", user_id: \"newUserForTest15\", email: \"newUserForTest15@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).put(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).send({ travel_mode: 'WALKING' }).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        res.body.travel_mode.should.equal('WALKING');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dbabcbca-0800-4f95-b2b8-5b36a15610bd",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Obtaining a List of locations",
            "fullTitle": "User Preferences API + Schema unit tests Obtaining a List of locations",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest16\", user_id: \"newUserForTest16\", email: \"newUserForTest16@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.status.should.equal(200);\n            res.body.length.should.equal(1);\n            done();\n        });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7dc28936-4626-4883-ae03-fb9c6a42183a",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deleting a User Preference",
            "fullTitle": "User Preferences API + Schema unit tests Deleting a User Preference",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest17\", user_id: \"newUserForTest17\", email: \"newUserForTest17@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).delete(\"/api/v1/userPreferences/\" + res.body.userPreference._id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5b50d686-894d-4e82-996c-060ab75f8589",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 120000,
        "file": "/test/testUserPreferences.js",
        "uuid": "e33bf5de-0b46-4be8-aa98-38ee05253395",
        "failedHooks": [],
        "fullFile": "/Users/colmcarew/Documents/Masters/Enterprise Web Dev/Assignment2/simple-route-mongo/test/testUserPreferences.js",
        "passes": [
          {
            "title": "should return collection of JSON documents",
            "fullTitle": "User Preferences API + Schema unit tests should return collection of JSON documents",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // This is the HTTP response\n.end(function (err, res) {\n    // HTTP status should be 200\n    res.status.should.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6f6e77c6-aee3-405b-acaf-d0d0882ae30a",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should add a User Preference",
            "fullTitle": "User Preferences API + Schema unit tests should add a User Preference",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username\", user_id: \"12345\", email: \"cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('cc@cc.cc');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d1c032d9-6c0c-4981-aeac-3e3950a6b8ab",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "user email can be blank",
            "fullTitle": "User Preferences API + Schema unit tests user email can be blank",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"usfffername\", user_id: \"123fff45\", email: \"\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "32ebc3fd-15d3-4570-abf4-bb31d2912659",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "username should does not need to be unique",
            "fullTitle": "User Preferences API + Schema unit tests username should does not need to be unique",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"1234567890\", email: \"colmtest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"123xxrere45\", email: \"cc2cvvc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        res.body.userPreference.username.should.equal(\"testusername\");\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d4219ef2-585c-421a-98d9-524c679d971a",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "user_id should be unique",
            "fullTitle": "User Preferences API + Schema unit tests user_id should be unique",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"RandonUserName\", user_id: \"test123\", email: \"antoherTest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"test123\", email: \"cc2cv323vc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bc4943b6-1316-4651-8bed-2dc163cf59dd",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "add a location to user preference",
            "fullTitle": "User Preferences API + Schema unit tests add a location to user preference",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2\", user_id: \"123452\", email: \"2cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    userPreference.email.should.equal('2cc@cc.cc');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5c1282f0-4137-4c1f-ade3-86cdf13d5984",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A location should have a correctly formatted latitude",
            "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted latitude",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2343\", user_id: \"123432432452\", email: \"3243242cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 'abvdfre', lng: -7.234534 }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ebf93151-c6d3-4cfd-9f59-0b99b9e901e2",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "A location should have a correctly formatted longitude",
            "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted longitude",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"use34rname2343\", user_id: \"1232432452\", email: \"32442cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 52.34534, lng: 'abvdfre' }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cd928064-a958-45d2-a7d0-4e53386199bb",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "An email should be formatted correctly",
            "fullTitle": "User Preferences API + Schema unit tests An email should be formatted correctly",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserName\", user_id: \"ANewUserId\", email: \"aBadEmail\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n            res.status.should.equal(500);\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "b67e6efa-d27c-4894-a2c8-c36140acf7d2",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User preference needs a username",
            "fullTitle": "User Preferences API + Schema unit tests User preference needs a username",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ user_id: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "728b5f51-fa4b-4bed-8196-17d1b27f14c0",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User preference needs a user id",
            "fullTitle": "User Preferences API + Schema unit tests User preference needs a user id",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "586ec210-6e57-4ada-a149-a854493a71fb",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Travel Mode Must be in Given List",
            "fullTitle": "User Preferences API + Schema unit tests Travel Mode Must be in Given List",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", travel_mode: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a2b57c41-8db7-4b1b-931f-be3acab1efda",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Unit System Must be within a given list",
            "fullTitle": "User Preferences API + Schema unit tests Unit System Must be within a given list",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", unit_system: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2ea7eb54-692d-4aeb-b99c-d1767fae4e2b",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Obtain User Preference By User Id - Not DB _id",
            "fullTitle": "User Preferences API + Schema unit tests Obtain User Preference By User Id - Not DB _id",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest14\", user_id: \"newUserForTest14\", email: \"newUserForTest14@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "938fe3a3-d671-4613-907d-7cacecff49d7",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Updating a User Preference",
            "fullTitle": "User Preferences API + Schema unit tests Updating a User Preference",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest15\", user_id: \"newUserForTest15\", email: \"newUserForTest15@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).put(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).send({ travel_mode: 'WALKING' }).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        res.body.travel_mode.should.equal('WALKING');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dbabcbca-0800-4f95-b2b8-5b36a15610bd",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Obtaining a List of locations",
            "fullTitle": "User Preferences API + Schema unit tests Obtaining a List of locations",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest16\", user_id: \"newUserForTest16\", email: \"newUserForTest16@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.status.should.equal(200);\n            res.body.length.should.equal(1);\n            done();\n        });\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7dc28936-4626-4883-ae03-fb9c6a42183a",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deleting a User Preference",
            "fullTitle": "User Preferences API + Schema unit tests Deleting a User Preference",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest17\", user_id: \"newUserForTest17\", email: \"newUserForTest17@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).delete(\"/api/v1/userPreferences/\" + res.body.userPreference._id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5b50d686-894d-4e82-996c-060ab75f8589",
            "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 17,
        "totalPasses": 17,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 206,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "0a171e33-56da-4caf-939b-8069f45a9488",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Cannot do anything via Rest without Basic Auth",
      "fullTitle": "Directions API + Schema unit tests Cannot do anything via Rest without Basic Auth",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").expect(\"Content-type\", /json/).expect(401).end(function (err, res) {\n    res.status.should.equal(401);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1dea59bd-ff4a-4ba5-a4f8-126a84b79d76",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return collection of JSON documents",
      "fullTitle": "Directions API + Schema unit tests should return collection of JSON documents",
      "timedOut": false,
      "duration": 534,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n    res.status.should.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "935cafe1-3f59-4819-a54f-de9e7c4c444a",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should add a direction",
      "fullTitle": "Directions API + Schema unit tests should add a direction",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"start_address\": \"49 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property('_id');\n    res.body.direction.should.have.property('date_searched');\n    res.body.direction.end_address.should.equal('12 Real Street');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "11933c23-68c0-4bc1-8ec7-a445ecb53167",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update direction",
      "fullTitle": "Directions API + Schema unit tests should update direction",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.put(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').send({ \"end_address\": \"12 Real Street\", \"start_address\": \"492 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).end(function (err, res) {\n        res.body._id.should.equal(id);\n        res.body.start_address.should.equal('492 Fake Street');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "df1a3158-4c89-4b3a-95a6-ce367a784317",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should get specific direction",
      "fullTitle": "Directions API + Schema unit tests should get specific direction",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.get(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n    .end(function (err, res) {\n        res.body._id.should.equal(id);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b647c61c-e0b8-4553-9e63-db524329f6cf",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should delete direction",
      "fullTitle": "Directions API + Schema unit tests should delete direction",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var superserver = (0, _supertest2.default)(_app.server);\n        superserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n        .end(function (err, res) {\n            var id = res.body[0]._id;\n            superserver.delete(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n            .end(function (err, res) {\n                res.body._id.should.equal(id);\n                res.body.should.have.property(\"date_searched\");\n                done();\n            });\n        });",
      "err": {},
      "isRoot": false,
      "uuid": "3e383177-36f7-41e4-a585-a910e2d516b8",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Cannot add direction with blank start address",
      "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank start address",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7a80c533-5a25-4c87-8770-bf16e4beabef",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Cannot add direction with blank end address",
      "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank end address",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5163544a-01fa-4dda-9f98-847ce3c7184d",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Cannot add direction with blank user",
      "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank user",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"end_address\": \"12 Real Street\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3c370a3e-8982-48d4-a8be-fb98885efb87",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Start Address should be greater than 5 characters",
      "fullTitle": "Directions API + Schema unit tests Start Address should be greater than 5 characters",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12\", \"end_address\": \"12 Real Street\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e03f409b-8bf5-435a-85b7-8e21c188e0dd",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "End Address should be greater than 5 characters",
      "fullTitle": "Directions API + Schema unit tests End Address should be greater than 5 characters",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"12\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "23585cc0-9252-4cc8-9c64-2feb9bad4cb5",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "User Id should be greater than 5 characters",
      "fullTitle": "Directions API + Schema unit tests User Id should be greater than 5 characters",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0ae32f40-e909-4932-941e-008d0daf9863",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Date search should Default to a date",
      "fullTitle": "Directions API + Schema unit tests Date search should Default to a date",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\", \"date_searched\": \"1234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    var regex = new RegExp(\"^\\\\d{4}\\\\-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d+Z$\");\n    (0, _should2.default)(regex.test(res.body.direction)).be.ok;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1b7b34d0-e554-4f11-858a-23545d3726d4",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Query Paramter - Limit - Should return one direction",
      "fullTitle": "Directions API + Schema unit tests Query Paramter - Limit - Should return one direction",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        var limit = 1;\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?limit=\" + limit).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(limit);\n            done();\n        });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8cf515ca-4c7d-4bdc-a335-a1c27c8546bb",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Query Paramter - User Id - Should return directions for that user",
      "fullTitle": "Directions API + Schema unit tests Query Paramter - User Id - Should return directions for that user",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var userId = \"Test14USerId\";\n(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?user_id=\" + userId).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(2);\n            done();\n        });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9488beb7-a924-40be-9551-7839ba7630e1",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return collection of JSON documents",
      "fullTitle": "User Preferences API + Schema unit tests should return collection of JSON documents",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // This is the HTTP response\n.end(function (err, res) {\n    // HTTP status should be 200\n    res.status.should.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6f6e77c6-aee3-405b-acaf-d0d0882ae30a",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should add a User Preference",
      "fullTitle": "User Preferences API + Schema unit tests should add a User Preference",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username\", user_id: \"12345\", email: \"cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('cc@cc.cc');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d1c032d9-6c0c-4981-aeac-3e3950a6b8ab",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "user email can be blank",
      "fullTitle": "User Preferences API + Schema unit tests user email can be blank",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"usfffername\", user_id: \"123fff45\", email: \"\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "32ebc3fd-15d3-4570-abf4-bb31d2912659",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "username should does not need to be unique",
      "fullTitle": "User Preferences API + Schema unit tests username should does not need to be unique",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"1234567890\", email: \"colmtest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"123xxrere45\", email: \"cc2cvvc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        res.body.userPreference.username.should.equal(\"testusername\");\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d4219ef2-585c-421a-98d9-524c679d971a",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "user_id should be unique",
      "fullTitle": "User Preferences API + Schema unit tests user_id should be unique",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"RandonUserName\", user_id: \"test123\", email: \"antoherTest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"test123\", email: \"cc2cv323vc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bc4943b6-1316-4651-8bed-2dc163cf59dd",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "add a location to user preference",
      "fullTitle": "User Preferences API + Schema unit tests add a location to user preference",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2\", user_id: \"123452\", email: \"2cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    userPreference.email.should.equal('2cc@cc.cc');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5c1282f0-4137-4c1f-ade3-86cdf13d5984",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "A location should have a correctly formatted latitude",
      "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted latitude",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2343\", user_id: \"123432432452\", email: \"3243242cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 'abvdfre', lng: -7.234534 }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ebf93151-c6d3-4cfd-9f59-0b99b9e901e2",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "A location should have a correctly formatted longitude",
      "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted longitude",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"use34rname2343\", user_id: \"1232432452\", email: \"32442cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 52.34534, lng: 'abvdfre' }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cd928064-a958-45d2-a7d0-4e53386199bb",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "An email should be formatted correctly",
      "fullTitle": "User Preferences API + Schema unit tests An email should be formatted correctly",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserName\", user_id: \"ANewUserId\", email: \"aBadEmail\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n            res.status.should.equal(500);\n            done();\n        });",
      "err": {},
      "isRoot": false,
      "uuid": "b67e6efa-d27c-4894-a2c8-c36140acf7d2",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "User preference needs a username",
      "fullTitle": "User Preferences API + Schema unit tests User preference needs a username",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ user_id: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "728b5f51-fa4b-4bed-8196-17d1b27f14c0",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "User preference needs a user id",
      "fullTitle": "User Preferences API + Schema unit tests User preference needs a user id",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "586ec210-6e57-4ada-a149-a854493a71fb",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Travel Mode Must be in Given List",
      "fullTitle": "User Preferences API + Schema unit tests Travel Mode Must be in Given List",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", travel_mode: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a2b57c41-8db7-4b1b-931f-be3acab1efda",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Unit System Must be within a given list",
      "fullTitle": "User Preferences API + Schema unit tests Unit System Must be within a given list",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", unit_system: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2ea7eb54-692d-4aeb-b99c-d1767fae4e2b",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Obtain User Preference By User Id - Not DB _id",
      "fullTitle": "User Preferences API + Schema unit tests Obtain User Preference By User Id - Not DB _id",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest14\", user_id: \"newUserForTest14\", email: \"newUserForTest14@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "938fe3a3-d671-4613-907d-7cacecff49d7",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Updating a User Preference",
      "fullTitle": "User Preferences API + Schema unit tests Updating a User Preference",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest15\", user_id: \"newUserForTest15\", email: \"newUserForTest15@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).put(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).send({ travel_mode: 'WALKING' }).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        res.body.travel_mode.should.equal('WALKING');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dbabcbca-0800-4f95-b2b8-5b36a15610bd",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Obtaining a List of locations",
      "fullTitle": "User Preferences API + Schema unit tests Obtaining a List of locations",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest16\", user_id: \"newUserForTest16\", email: \"newUserForTest16@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.status.should.equal(200);\n            res.body.length.should.equal(1);\n            done();\n        });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7dc28936-4626-4883-ae03-fb9c6a42183a",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Deleting a User Preference",
      "fullTitle": "User Preferences API + Schema unit tests Deleting a User Preference",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest17\", user_id: \"newUserForTest17\", email: \"newUserForTest17@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).delete(\"/api/v1/userPreferences/\" + res.body.userPreference._id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5b50d686-894d-4e82-996c-060ab75f8589",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Cannot do anything via Rest without Basic Auth",
      "fullTitle": "Directions API + Schema unit tests Cannot do anything via Rest without Basic Auth",
      "timedOut": false,
      "duration": 34,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").expect(\"Content-type\", /json/).expect(401).end(function (err, res) {\n    res.status.should.equal(401);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1dea59bd-ff4a-4ba5-a4f8-126a84b79d76",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return collection of JSON documents",
      "fullTitle": "Directions API + Schema unit tests should return collection of JSON documents",
      "timedOut": false,
      "duration": 534,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n    res.status.should.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "935cafe1-3f59-4819-a54f-de9e7c4c444a",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should add a direction",
      "fullTitle": "Directions API + Schema unit tests should add a direction",
      "timedOut": false,
      "duration": 47,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"start_address\": \"49 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property('_id');\n    res.body.direction.should.have.property('date_searched');\n    res.body.direction.end_address.should.equal('12 Real Street');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "11933c23-68c0-4bc1-8ec7-a445ecb53167",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update direction",
      "fullTitle": "Directions API + Schema unit tests should update direction",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.put(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').send({ \"end_address\": \"12 Real Street\", \"start_address\": \"492 Fake Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).end(function (err, res) {\n        res.body._id.should.equal(id);\n        res.body.start_address.should.equal('492 Fake Street');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "df1a3158-4c89-4b3a-95a6-ce367a784317",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should get specific direction",
      "fullTitle": "Directions API + Schema unit tests should get specific direction",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var superserver = (0, _supertest2.default)(_app.server);\nsuperserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n.end(function (err, res) {\n    var id = res.body[0]._id;\n    superserver.get(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n    .end(function (err, res) {\n        res.body._id.should.equal(id);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b647c61c-e0b8-4553-9e63-db524329f6cf",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should delete direction",
      "fullTitle": "Directions API + Schema unit tests should delete direction",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var superserver = (0, _supertest2.default)(_app.server);\n        superserver.get(\"/api/v1/directions\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n        .end(function (err, res) {\n            var id = res.body[0]._id;\n            superserver.delete(\"/api/v1/directions/\" + id).set('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=').expect(\"Content-type\", /json/).expect(200) // THis is HTTP response\n            .end(function (err, res) {\n                res.body._id.should.equal(id);\n                res.body.should.have.property(\"date_searched\");\n                done();\n            });\n        });",
      "err": {},
      "isRoot": false,
      "uuid": "3e383177-36f7-41e4-a585-a910e2d516b8",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Cannot add direction with blank start address",
      "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank start address",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"end_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7a80c533-5a25-4c87-8770-bf16e4beabef",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Cannot add direction with blank end address",
      "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank end address",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"user_id\": \"132323_234234234\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5163544a-01fa-4dda-9f98-847ce3c7184d",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Cannot add direction with blank user",
      "fullTitle": "Directions API + Schema unit tests Cannot add direction with blank user",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12 Real Street\", \"end_address\": \"12 Real Street\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3c370a3e-8982-48d4-a8be-fb98885efb87",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Start Address should be greater than 5 characters",
      "fullTitle": "Directions API + Schema unit tests Start Address should be greater than 5 characters",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"12\", \"end_address\": \"12 Real Street\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e03f409b-8bf5-435a-85b7-8e21c188e0dd",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "End Address should be greater than 5 characters",
      "fullTitle": "Directions API + Schema unit tests End Address should be greater than 5 characters",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"12\", \"user_id\": \"1234567543524\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "23585cc0-9252-4cc8-9c64-2feb9bad4cb5",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "User Id should be greater than 5 characters",
      "fullTitle": "Directions API + Schema unit tests User Id should be greater than 5 characters",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0ae32f40-e909-4932-941e-008d0daf9863",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Date search should Default to a date",
      "fullTitle": "Directions API + Schema unit tests Date search should Default to a date",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\", \"date_searched\": \"1234\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    var regex = new RegExp(\"^\\\\d{4}\\\\-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d+Z$\");\n    (0, _should2.default)(regex.test(res.body.direction)).be.ok;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1b7b34d0-e554-4f11-858a-23545d3726d4",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Query Paramter - Limit - Should return one direction",
      "fullTitle": "Directions API + Schema unit tests Query Paramter - Limit - Should return one direction",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": \"12543453454335\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        var limit = 1;\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?limit=\" + limit).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(limit);\n            done();\n        });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8cf515ca-4c7d-4bdc-a335-a1c27c8546bb",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Query Paramter - User Id - Should return directions for that user",
      "fullTitle": "Directions API + Schema unit tests Query Paramter - User Id - Should return directions for that user",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var userId = \"Test14USerId\";\n(0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.direction.should.have.property(\"date_searched\");\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/directions\").set('Authorization', basicAuth).send({ \"start_address\": \"123 Fark Street\", \"end_address\": \"123 Real Street\", \"user_id\": userId }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/directions?user_id=\" + userId).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.body.length.should.equal(2);\n            done();\n        });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9488beb7-a924-40be-9551-7839ba7630e1",
      "parentUUID": "47122c45-775d-4018-b786-c03ff84c6d05",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return collection of JSON documents",
      "fullTitle": "User Preferences API + Schema unit tests should return collection of JSON documents",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200) // This is the HTTP response\n.end(function (err, res) {\n    // HTTP status should be 200\n    res.status.should.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6f6e77c6-aee3-405b-acaf-d0d0882ae30a",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should add a User Preference",
      "fullTitle": "User Preferences API + Schema unit tests should add a User Preference",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username\", user_id: \"12345\", email: \"cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('cc@cc.cc');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d1c032d9-6c0c-4981-aeac-3e3950a6b8ab",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "user email can be blank",
      "fullTitle": "User Preferences API + Schema unit tests user email can be blank",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"usfffername\", user_id: \"123fff45\", email: \"\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    res.body.userPreference.email.should.equal('');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "32ebc3fd-15d3-4570-abf4-bb31d2912659",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "username should does not need to be unique",
      "fullTitle": "User Preferences API + Schema unit tests username should does not need to be unique",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"1234567890\", email: \"colmtest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"123xxrere45\", email: \"cc2cvvc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        res.body.userPreference.username.should.equal(\"testusername\");\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d4219ef2-585c-421a-98d9-524c679d971a",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "user_id should be unique",
      "fullTitle": "User Preferences API + Schema unit tests user_id should be unique",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var url = \"/api/v1/userPreferences\";\n(0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"RandonUserName\", user_id: \"test123\", email: \"antoherTest@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    res.body.userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(url).set('Authorization', basicAuth).send({ username: \"testusername\", user_id: \"test123\", email: \"cc2cv323vc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bc4943b6-1316-4651-8bed-2dc163cf59dd",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "add a location to user preference",
      "fullTitle": "User Preferences API + Schema unit tests add a location to user preference",
      "timedOut": false,
      "duration": 27,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2\", user_id: \"123452\", email: \"2cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    userPreference.email.should.equal('2cc@cc.cc');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5c1282f0-4137-4c1f-ade3-86cdf13d5984",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "A location should have a correctly formatted latitude",
      "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted latitude",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"username2343\", user_id: \"123432432452\", email: \"3243242cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 'abvdfre', lng: -7.234534 }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ebf93151-c6d3-4cfd-9f59-0b99b9e901e2",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "A location should have a correctly formatted longitude",
      "fullTitle": "User Preferences API + Schema unit tests A location should have a correctly formatted longitude",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"use34rname2343\", user_id: \"1232432452\", email: \"32442cc@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 52.34534, lng: 'abvdfre' }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n        res.status.should.equal(500);\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cd928064-a958-45d2-a7d0-4e53386199bb",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "An email should be formatted correctly",
      "fullTitle": "User Preferences API + Schema unit tests An email should be formatted correctly",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserName\", user_id: \"ANewUserId\", email: \"aBadEmail\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n            res.status.should.equal(500);\n            done();\n        });",
      "err": {},
      "isRoot": false,
      "uuid": "b67e6efa-d27c-4894-a2c8-c36140acf7d2",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "User preference needs a username",
      "fullTitle": "User Preferences API + Schema unit tests User preference needs a username",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ user_id: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "728b5f51-fa4b-4bed-8196-17d1b27f14c0",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "User preference needs a user id",
      "fullTitle": "User Preferences API + Schema unit tests User preference needs a user id",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUserId\", email: \"cc34343456@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "586ec210-6e57-4ada-a149-a854493a71fb",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Travel Mode Must be in Given List",
      "fullTitle": "User Preferences API + Schema unit tests Travel Mode Must be in Given List",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", travel_mode: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a2b57c41-8db7-4b1b-931f-be3acab1efda",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Unit System Must be within a given list",
      "fullTitle": "User Preferences API + Schema unit tests Unit System Must be within a given list",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"ANewUse5435443rId\", user_id: \"ANewUserIDDD\", email: \"cc34343456@cc.cc\", provider: \"test\", unit_system: \"Invalid\" }).expect(\"Content-type\", /json/).expect(500).end(function (err, res) {\n    res.body.name.should.equal('ValidationError');\n    res.status.should.equal(500);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2ea7eb54-692d-4aeb-b99c-d1767fae4e2b",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Obtain User Preference By User Id - Not DB _id",
      "fullTitle": "User Preferences API + Schema unit tests Obtain User Preference By User Id - Not DB _id",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest14\", user_id: \"newUserForTest14\", email: \"newUserForTest14@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "938fe3a3-d671-4613-907d-7cacecff49d7",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Updating a User Preference",
      "fullTitle": "User Preferences API + Schema unit tests Updating a User Preference",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest15\", user_id: \"newUserForTest15\", email: \"newUserForTest15@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).put(\"/api/v1/userPreferences/\" + res.body.userPreference.user_id).set('Authorization', basicAuth).send({ travel_mode: 'WALKING' }).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        res.body.travel_mode.should.equal('WALKING');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dbabcbca-0800-4f95-b2b8-5b36a15610bd",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Obtaining a List of locations",
      "fullTitle": "User Preferences API + Schema unit tests Obtaining a List of locations",
      "timedOut": false,
      "duration": 41,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest16\", user_id: \"newUserForTest16\", email: \"newUserForTest16@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    var userPreference = res.body.userPreference;\n    userPreference.should.have.property('_id');\n    (0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).send({ lat: 54.5645654, lng: -7.234534 }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n        res.status.should.equal(201);\n        var location = res.body;\n        location.should.have.property('_id');\n        location.lat.should.equal(54.5645654);\n        location.lng.should.equal(-7.234534);\n        (0, _supertest2.default)(_app.server).get(\"/api/v1/userPreferences/\" + userPreference.user_id + \"/locations\").set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n            res.status.should.equal(200);\n            res.body.length.should.equal(1);\n            done();\n        });\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7dc28936-4626-4883-ae03-fb9c6a42183a",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Deleting a User Preference",
      "fullTitle": "User Preferences API + Schema unit tests Deleting a User Preference",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(0, _supertest2.default)(_app.server).post(\"/api/v1/userPreferences\").set('Authorization', basicAuth).send({ username: \"newUserForTest17\", user_id: \"newUserForTest17\", email: \"newUserForTest17@cc.cc\", provider: \"test\" }).expect(\"Content-type\", /json/).expect(201).end(function (err, res) {\n    res.status.should.equal(201);\n    (0, _supertest2.default)(_app.server).delete(\"/api/v1/userPreferences/\" + res.body.userPreference._id).set('Authorization', basicAuth).expect(\"Content-type\", /json/).expect(200).end(function (err, res) {\n        res.status.should.equal(200);\n        res.body.should.have.property('_id');\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5b50d686-894d-4e82-996c-060ab75f8589",
      "parentUUID": "e33bf5de-0b46-4be8-aa98-38ee05253395",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}